function sanitizeHTML(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}function sanitizeText(e){return"string"!=typeof e?"":e.replace(/<[^>]*>/g,"").trim().slice(0,200)}function showNotification(e,t="info",l=3e3){const a=createElement("div",`notification notification-${t}`);a.textContent=e;(document.getElementById("notificationContainer")||createNotificationContainer()).appendChild(a),requestAnimationFrame(()=>{a.classList.add("show")}),setTimeout(()=>{a.classList.remove("show"),setTimeout(()=>a.remove(),300)},l)}function createNotificationContainer(){const e=createElement("div","notification-container");return e.id="notificationContainer",document.body.appendChild(e),e}let lastSaveTime=0;const SAVE_COOLDOWN=1e3;function canSave(){const e=Date.now();return!(e-lastSaveTime<1e3)&&(lastSaveTime=e,!0)}const state={channelActions:0,playerLevel:1,selectedClasses:[],selected:{spellType:null,base:null,damageType:null,healType:null,effectType:null,modules:[],extraBuffs:{}},savedSpells:[],currentSpell:null},DOM={channelCount:null,playerLevel:null,classGrid:null,classInfo:null,spellTypeSelector:null,spellTypeLabel:null,spellBaseOptions:null,typeLabel:null,typeOptions:null,componentModules:null,extraBuffSection:null,extraBuffSelections:null,availableModules:null,generateBtn:null,resetBtn:null,spellOutput:null,spellName:null,spellStats:null,spellDescription:null,savedSpellsList:null,spellNamingDialog:null,spellNameInput:null,sections:{}},cachedQueries={spellTypeCards:null,spellOptions:null,damageTypeOptions:null,componentModules:null,classOptions:null,allSections:null};function invalidateQueryCache(e=null){e?cachedQueries[e]=null:Object.keys(cachedQueries).forEach(e=>cachedQueries[e]=null)}function cacheDOMElements(){DOM.channelCount=document.getElementById("channelCount"),DOM.playerLevel=document.getElementById("playerLevel"),DOM.classGrid=document.getElementById("classGrid"),DOM.classInfo=document.getElementById("classInfo"),DOM.spellTypeSelector=document.getElementById("spellTypeSelector"),DOM.spellTypeLabel=document.getElementById("spellTypeLabel"),DOM.spellBaseOptions=document.getElementById("spellBaseOptions"),DOM.typeLabel=document.getElementById("typeLabel"),DOM.typeOptions=document.getElementById("typeOptions"),DOM.componentModules=document.getElementById("componentModules"),DOM.extraBuffSection=document.getElementById("extraBuffSection"),DOM.extraBuffSelections=document.getElementById("extraBuffSelections"),DOM.availableModules=document.getElementById("availableModules"),DOM.generateBtn=document.getElementById("generateBtn"),DOM.resetBtn=document.getElementById("resetBtn"),DOM.spellOutput=document.getElementById("spellOutput"),DOM.spellName=document.getElementById("spellName"),DOM.spellStats=document.getElementById("spellStats"),DOM.spellDescription=document.getElementById("spellDescription"),DOM.savedSpellsList=document.getElementById("savedSpellsList"),DOM.spellNamingDialog=document.getElementById("spellNamingDialog"),DOM.spellNameInput=document.getElementById("spellNameInput"),DOM.sections={spellType:document.getElementById("spellTypeSection"),spellBase:document.getElementById("spellBaseSection"),damageType:document.getElementById("damageTypeSection"),component:document.getElementById("componentSection")}}function setupEventListeners(){document.addEventListener("click",handleClick),DOM.playerLevel.addEventListener("change",updatePlayerLevel),DOM.spellNameInput.addEventListener("keypress",e=>{"Enter"===e.key&&confirmSpellGeneration(),"Escape"===e.key&&closeDialog()});[DOM.componentModules].forEach(e=>{e&&(e.addEventListener("scroll",()=>{},{passive:!0}),e.addEventListener("touchstart",()=>{},{passive:!0}),e.addEventListener("touchmove",()=>{},{passive:!0}))})}function handleClick(e){const t=e.target,l=t.dataset.action;if(!l)return;e.preventDefault();const a={"adjust-channel":()=>adjustChannelActions(parseInt(t.dataset.value)),reset:resetSpell,"show-naming-dialog":showSpellNamingDialog,"confirm-spell":confirmSpellGeneration,"close-dialog":closeDialog,"save-spell":saveSpell,"export-spell":exportSpell};a[l]&&a[l]()}function createElement(e,t,l,a=!1){const s=document.createElement(e);return t&&(s.className=t),l&&(a?s.innerHTML=l:s.textContent=l),s}function toggleClass(e,t,l){void 0!==l?e.classList.toggle(t,l):e.classList.toggle(t)}function renderClasses(){const e=document.createDocumentFragment();Object.entries(classData).forEach(([t,l])=>{const a=createElement("div","class-option",l.name);a.dataset.classKey=t,a.addEventListener("click",()=>toggleClassSelection(t)),e.appendChild(a)}),DOM.classGrid.appendChild(e)}function toggleClassSelection(e){const t=state.selectedClasses.indexOf(e);if(t>-1)state.selectedClasses.splice(t,1);else{if(state.selectedClasses.length>=2)return void showNotification("You can only select up to 2 magical classes!","warning");state.selectedClasses.push(e)}invalidateDiceCache(),updateClassUI(),updateClassInfo(),"attack"===state.selected.base?.type&&DOM.sections.damageType.classList.contains("active")&&renderDamageTypes()}function updateClassUI(){cachedQueries.classOptions||(cachedQueries.classOptions=document.querySelectorAll(".class-option")),cachedQueries.classOptions.forEach(e=>{const t=e.dataset.classKey;toggleClass(e,"selected",state.selectedClasses.includes(t))})}function updateClassInfo(){if(0===state.selectedClasses.length)return void(DOM.classInfo.innerHTML="");const e=document.createDocumentFragment(),t=createElement("strong",null,"Selected Classes:");e.appendChild(t),e.appendChild(document.createElement("br")),state.selectedClasses.forEach(t=>{const l=classData[t],a=document.createTextNode(`â€¢ ${l.name}: ${l.description}`);e.appendChild(a),e.appendChild(document.createElement("br"));const s=document.createTextNode(`  Damage: ${l.damageDie} | Healing: ${l.healingDie}`);e.appendChild(s),e.appendChild(document.createElement("br"))});const l=getAvailableDamageTypes();if(l.length>0){e.appendChild(document.createElement("br"));const t=createElement("strong",null,"Available Damage Types: ");e.appendChild(t);const a=l.map(e=>{for(const t of Object.values(spellData.damageTypes))if(t[e])return t[e].name;return e}).join(", "),s=document.createTextNode(a);e.appendChild(s)}DOM.classInfo.innerHTML="",DOM.classInfo.appendChild(e)}function getAvailableDamageTypes(){if(0===state.selectedClasses.length){const e=[];for(const t of Object.values(spellData.damageTypes))e.push(...Object.keys(t));return e}const e=new Set;return state.selectedClasses.forEach(t=>{classData[t].damageTypes.forEach(t=>e.add(t))}),Array.from(e)}const diceCache={damage:null,healing:null,lastClassesHash:null};function getClassesHash(){return state.selectedClasses.sort().join(",")}function getDamageDice(){const e=getClassesHash();if(diceCache.damage&&diceCache.lastClassesHash===e)return diceCache.damage;if(0===state.selectedClasses.length)return diceCache.damage="1d8",diceCache.lastClassesHash=e,diceCache.damage;const t=state.selectedClasses.map(e=>classData[e].damageDie);return t.sort((e,t)=>{const l=parseInt(e.match(/d(\d+)/)[1]);return parseInt(t.match(/d(\d+)/)[1])-l}),diceCache.damage=t[0],diceCache.lastClassesHash=e,diceCache.damage}function getHealingDice(){const e=getClassesHash();if(diceCache.healing&&diceCache.lastClassesHash===e)return diceCache.healing;if(0===state.selectedClasses.length)return diceCache.healing="1d8",diceCache.lastClassesHash=e,diceCache.healing;const t=state.selectedClasses.map(e=>classData[e].healingDie);return t.sort((e,t)=>{const l=parseInt(e.match(/d(\d+)/)[1]);return parseInt(t.match(/d(\d+)/)[1])-l}),diceCache.healing=t[0],diceCache.lastClassesHash=e,diceCache.healing}function invalidateDiceCache(){diceCache.damage=null,diceCache.healing=null,diceCache.lastClassesHash=null}function updatePlayerLevel(){let e=parseInt(DOM.playerLevel.value,10);(isNaN(e)||e<1||e>10)&&(e=Math.max(1,Math.min(10,e||1)),DOM.playerLevel.value=e,showNotification("Level must be between 1 and 10","warning",2e3)),state.playerLevel=e,DOM.sections.damageType.classList.contains("active")&&("heal"===state.selected.base?.type?renderHealTypes():"effect"===state.selected.base?.type&&renderEffectTypes())}function adjustChannelActions(e){state.channelActions=Math.max(0,Math.min(10,state.channelActions+e)),DOM.channelCount.textContent=state.channelActions,updateAvailableModules();const t=state.channelActions+1;state.selected.modules.length>t&&(state.selected.modules=state.selected.modules.slice(0,t),updateModuleStates())}function updateAvailableModules(){const e=state.channelActions+1-state.selected.modules.length;DOM.availableModules.textContent=e}function renderSpellTypes(){const e=document.createDocumentFragment();Object.entries(spellTypeConfig).forEach(([t,l])=>{const a=createElement("div","spell-type-card");a.dataset.spellType=t;const s=createElement("div","spell-type-icon",l.icon),n=createElement("div","spell-type-name",l.name),c=createElement("div",null,l.description);c.style.fontSize="0.85em",c.style.marginTop="5px",a.appendChild(s),a.appendChild(n),a.appendChild(c),a.addEventListener("click",()=>selectSpellType(t)),e.appendChild(a)}),DOM.spellTypeSelector.appendChild(e)}function selectSpellType(e){cachedQueries.spellTypeCards||(cachedQueries.spellTypeCards=document.querySelectorAll(".spell-type-card")),cachedQueries.spellTypeCards.forEach(t=>{toggleClass(t,"selected",t.dataset.spellType===e)}),state.selected.spellType=e,state.selected.base=null,state.selected.damageType=null,state.selected.healType=null,state.selected.effectType=null,state.selected.modules=[],DOM.resetBtn.style.display="inline-block",DOM.sections.spellBase.classList.add("active");DOM.spellTypeLabel.textContent={attack:"Attack Spell",heal:"Healing Spell",effect:"Effect Spell"}[e],renderSpellBases(e),DOM.sections.damageType.classList.remove("active"),DOM.sections.component.classList.remove("active"),DOM.generateBtn.style.display="none",DOM.spellOutput.classList.remove("visible")}function renderSpellBases(e){DOM.spellBaseOptions.innerHTML="",invalidateQueryCache("spellOptions");let t={},l="";"attack"===e?t=spellData.attackSpells:"heal"===e?(t=spellData.healSpells,l='<div class="warning">Healing expends one of the target\'s Hit Dice. If unavailable, they take one level of Fatigue.</div>'):"effect"===e&&(t=spellData.effectSpells,l='<div class="info-box">Effect spells create areas that trigger when creatures start their turn in or enter the area.</div>'),l&&(DOM.spellBaseOptions.innerHTML=l);const a=createElement("div","spell-base-grid"),s=document.createDocumentFragment();Object.entries(t).forEach(([e,t])=>{const l=createElement("div","spell-option");l.dataset.baseKey=e;let a="";if(t.damage&&"meleeStrike"!==e&&"rangedStrike"!==e){const e=getDamageDice();a=`<div class="dice-info">${sanitizeHTML(t.damage)}Ã—${sanitizeHTML(e)}</div>`}if(t.healing){const e=getHealingDice();a=`<div class="dice-info">${sanitizeHTML(t.healing)}Ã—${sanitizeHTML(e)}</div>`}l.innerHTML=`\n            <div class="spell-option-title">${sanitizeHTML(t.name)}</div>\n            <div class="spell-option-description">${sanitizeHTML(t.description)}</div>\n            ${a}\n        `,l.addEventListener("click",()=>selectSpellBase(e)),s.appendChild(l)}),a.appendChild(s),DOM.spellBaseOptions.appendChild(a)}function selectSpellBase(e){cachedQueries.spellOptions||(cachedQueries.spellOptions=document.querySelectorAll(".spell-option")),cachedQueries.spellOptions.forEach(t=>{toggleClass(t,"selected",t.dataset.baseKey===e)}),state.selected.base={type:state.selected.spellType,key:e},state.selected.damageType=null,state.selected.healType=null,state.selected.effectType=null,state.selected.modules=[],DOM.sections.damageType.classList.add("active"),"attack"===state.selected.spellType?(DOM.typeLabel.textContent="Damage Type",renderDamageTypes()):"heal"===state.selected.spellType?(DOM.typeLabel.textContent="Healing Type",renderHealTypes()):"effect"===state.selected.spellType&&(DOM.typeLabel.textContent="Effect Type",renderEffectTypes()),DOM.sections.component.classList.add("active"),renderComponentModules(),updateModuleStates(),updateAvailableModules(),DOM.generateBtn.style.display="block"}function renderDamageTypes(){DOM.typeOptions.innerHTML="",invalidateQueryCache("damageTypeOptions");const e=getAvailableDamageTypes();if(Object.entries(spellData.damageTypes).forEach(([t,l])=>{const a=createElement("div","damage-type-grid"),s=document.createDocumentFragment();let n=!1;if(Object.entries(l).forEach(([t,l])=>{if(!e.includes(t))return;n=!0;const a=createElement("div","damage-type-option");a.dataset.damageType=t;const c=createElement("div",null,l.name),i=createElement("div",null,`vs ${l.defense}`);i.style.fontSize="0.8em",i.style.opacity="0.8",a.appendChild(c),a.appendChild(i),a.addEventListener("click",()=>selectDamageType(t)),s.appendChild(a)}),n){const e=createElement("div","damage-type-category",t);DOM.typeOptions.appendChild(e),a.appendChild(s),DOM.typeOptions.appendChild(a)}}),state.selectedClasses.length>0){const e=createElement("div","info-box");e.style.marginTop="15px",e.textContent="Available damage types are limited by your selected magical classes.",DOM.typeOptions.appendChild(e)}}function selectDamageType(e){document.querySelectorAll("#typeOptions .damage-type-option").forEach(t=>{toggleClass(t,"selected",t.dataset.damageType===e)}),state.selected.damageType=e}function renderHealTypes(){DOM.typeOptions.innerHTML="";const e=createElement("div","damage-type-grid"),t=document.createDocumentFragment();Object.entries(spellData.healTypes).forEach(([e,l])=>{if(l.level&&l.level>state.playerLevel)return;const a=createElement("div","damage-type-option");a.dataset.healType=e;const s=l.level?` (Lvl ${l.level}+)`:"",n=createElement("div",null,l.name+s),c=createElement("div",null,l.description);c.style.fontSize="0.8em",c.style.opacity="0.8",a.appendChild(n),a.appendChild(c),a.addEventListener("click",()=>selectHealType(e)),t.appendChild(a)}),e.appendChild(t),DOM.typeOptions.appendChild(e)}function selectHealType(e){document.querySelectorAll("#typeOptions .damage-type-option").forEach(t=>{toggleClass(t,"selected",t.dataset.healType===e)}),state.selected.healType=e}function renderEffectTypes(){DOM.typeOptions.innerHTML="",renderEffectCategory("Positive Effects (Allies)",spellData.positiveEffects,"positive"),renderEffectCategory("Negative Effects (Enemies)",spellData.negativeEffects,"negative");const e=Object.entries(spellData.conditions).filter(([,e])=>e.level<=state.playerLevel);e.length>0&&renderEffectCategory("Conditions",Object.fromEntries(e),"condition")}function renderEffectCategory(e,t,l){const a=createElement("div","damage-type-category",e),s=createElement("div","damage-type-grid"),n=document.createDocumentFragment();Object.entries(t).forEach(([e,t])=>{const a=createElement("div","damage-type-option");a.dataset.effectCategory=l,a.dataset.effectKey=e;const s=createElement("div",null,t.name);if(a.appendChild(s),t.single){const e=createElement("div",null,`Single: ${t.single} | Multi: ${t.multi}${t.defense?` | vs ${t.defense}`:""}`);e.style.fontSize="0.8em",a.appendChild(e)}else if(t.defense){const e=t.level>1?` (Lvl ${t.level}+)`:"",l=createElement("div",null,`vs ${t.defense}${e}`);l.style.fontSize="0.8em",a.appendChild(l)}a.addEventListener("click",()=>selectEffectType(l,e)),n.appendChild(a)}),s.appendChild(n),DOM.typeOptions.appendChild(a),DOM.typeOptions.appendChild(s)}function selectEffectType(e,t){document.querySelectorAll("#typeOptions .damage-type-option").forEach(l=>{toggleClass(l,"selected",l.dataset.effectCategory===e&&l.dataset.effectKey===t)}),state.selected.effectType={category:e,key:t}}function renderComponentModules(){DOM.componentModules.innerHTML="";const e=document.createDocumentFragment();Object.entries(spellData.componentModules).forEach(([t,l])=>{if(!isModuleApplicable(l))return;const a=createElement("div","component-module");a.dataset.moduleKey=t,a.innerHTML=`\n            <div class="component-module-title">${l.name}</div>\n            <div class="component-module-description">${l.description}</div>\n        `,a.addEventListener("click",()=>toggleModule(t)),e.appendChild(a)}),DOM.componentModules.appendChild(e)}function isModuleApplicable(e){return!!state.selected.base&&(!!e.applicable.includes("all")||(!!e.applicable.includes(state.selected.base.type)||!!e.applicable.includes(state.selected.base.key)))}function toggleModule(e){if(!isModuleApplicable(spellData.componentModules[e]))return;const t=state.selected.modules.indexOf(e);if(t>-1)state.selected.modules.splice(t,1),"extraBuff"===e&&delete state.selected.extraBuffs[`extraBuff_${t}`];else{const t=state.channelActions+1;state.selected.modules.length<t&&state.selected.modules.push(e)}updateModuleStates(),updateAvailableModules(),updateExtraBuffSection()}function updateModuleStates(){document.querySelectorAll(".component-module").forEach(e=>{const t=e.dataset.moduleKey;e.classList.remove("selected","disabled"),state.selected.modules.includes(t)?e.classList.add("selected"):state.selected.modules.length>=state.channelActions+1&&e.classList.add("disabled")})}function updateExtraBuffSection(){const e=state.selected.modules.filter(e=>"extraBuff"===e).length;if(0!==e){DOM.extraBuffSection.style.display="block",DOM.extraBuffSelections.innerHTML="";for(let t=0;t<e;t++){const e=createElement("div");e.style.cssText="margin-bottom: 20px; padding: 15px; background: #f8f9ff; border-radius: 10px; border: 2px solid #ddd;";const l=createElement("h5",null,`Extra Effect #${t+1}:`);l.style.color="var(--color-primary)",l.style.marginBottom="10px",e.appendChild(l);const a=createElement("div");a.id=`extraBuffOptions_${t}`,e.appendChild(a),DOM.extraBuffSelections.appendChild(e),renderExtraBuffOptions(t)}}else DOM.extraBuffSection.style.display="none"}function renderExtraBuffOptions(e){const t=document.getElementById(`extraBuffOptions_${e}`);renderEffectCategory("Positive Effects (Allies)",spellData.positiveEffects,"positive"),renderEffectCategory("Negative Effects (Enemies)",spellData.negativeEffects,"negative");const l=Object.entries(spellData.conditions).filter(([,e])=>e.level<=state.playerLevel);for(l.length>0&&renderEffectCategory("Conditions",Object.fromEntries(l),"condition");DOM.typeOptions.firstChild;)t.appendChild(DOM.typeOptions.firstChild);t.querySelectorAll(".damage-type-option").forEach(t=>{t.addEventListener("click",()=>selectExtraBuff(e,t.dataset.effectCategory,t.dataset.effectKey))})}function selectExtraBuff(e,t,l){document.getElementById(`extraBuffOptions_${e}`).querySelectorAll(".damage-type-option").forEach(e=>{toggleClass(e,"selected",e.dataset.effectCategory===t&&e.dataset.effectKey===l)}),state.selected.extraBuffs[`extraBuff_${e}`]={category:t,key:l}}function showSpellNamingDialog(){if(!validateSpell())return;const e=compileSpell();DOM.spellNameInput.value=e.name,DOM.spellNamingDialog.classList.add("active"),DOM.spellNameInput.focus(),DOM.spellNameInput.select()}function validateSpell(){if(!state.selected.base)return showNotification("Please select a spell base!","error"),!1;if("attack"===state.selected.base.type&&!state.selected.damageType)return showNotification("Please select a damage type!","error"),!1;if("heal"===state.selected.base.type&&!state.selected.healType)return showNotification("Please select a healing type!","error"),!1;if("effect"===state.selected.base.type&&!state.selected.effectType)return showNotification("Please select an effect type!","error"),!1;return!(state.selected.modules.filter(e=>"extraBuff"===e).length>Object.keys(state.selected.extraBuffs).length)||(showNotification("Please select all extra buff/debuff effects!","error"),!1)}function closeDialog(){DOM.spellNamingDialog.classList.remove("active")}function confirmSpellGeneration(){const e=sanitizeText(DOM.spellNameInput.value.trim());if(!e||e.length<1||e.length>100)return void showNotification("Please enter a valid spell name (1-100 characters)!","error");const t=compileSpell();t.name=e,t.customName=e,closeDialog(),displaySpell(t),state.currentSpell=t}function compileSpell(){const e={base:state.selected.base,modules:[...state.selected.modules],extraBuffs:{...state.selected.extraBuffs},channelActions:state.channelActions,classes:[...state.selectedClasses],level:state.playerLevel};let t;return"attack"===state.selected.base.type?(t=spellData.attackSpells[state.selected.base.key],e.damageType=state.selected.damageType):"heal"===state.selected.base.type?(t=spellData.healSpells[state.selected.base.key],e.healType=state.selected.healType):(t=spellData.effectSpells[state.selected.base.key],e.effectType=state.selected.effectType),e.name=generateSpellName(e,t),e.description=generateSpellDescription(e,t),e.stats=generateSpellStats(e,t),e}function generateSpellName(e,t){let l=t.name;if(e.damageType){l=findDamageType(e.damageType).name+" "+l}else if(e.healType){const t=spellData.healTypes[e.healType];"hp"!==e.healType&&(l=t.name+" "+l)}else if(e.effectType){l=getEffectData(e.effectType).name+" "+l}return e.modules.includes("concentration")&&(l="Sustained "+l),e.modules.includes("extraDamage")&&(l="Empowered "+l),l}function generateSpellDescription(e,t){let l=t.description;return e.modules.forEach(e=>{const t=spellData.componentModules[e];l+=` [${t.name}: ${t.description}]`}),Object.values(e.extraBuffs||{}).forEach((e,t)=>{const a=getEffectData(e);l+=` [Extra Effect ${t+1}: ${a.name}]`}),l}function generateSpellStats(e,t){const l=[];if(e.classes.length>0&&l.push({label:"Class",value:e.classes.map(e=>classData[e].name).join(" / ")}),l.push({label:"Type",value:e.base.type.charAt(0).toUpperCase()+e.base.type.slice(1)}),t.range&&l.push({label:"Range",value:t.range}),t.area&&l.push({label:"Area",value:t.area}),t.damage)if("meleeStrike"===e.base.key||"rangedStrike"===e.base.key){let a=t.damage;e.modules.includes("extraDamage")&&(a+=" + 1Ã—"+getDamageDice()),l.push({label:"Damage",value:a})}else{const a=getDamageDice();let s=t.damage+"Ã—"+a;e.modules.includes("extraDamage")&&(s+=" + 1Ã—"+a),l.push({label:"Damage",value:s})}else if(t.healing){const a=getHealingDice();let s=t.healing+"Ã—"+a;e.modules.includes("extraHeal")&&(s+=" + 1Ã—"+a),l.push({label:"Healing",value:s})}if(e.damageType){const t=findDamageType(e.damageType);l.push({label:"Damage Type",value:t.name}),l.push({label:"Defense",value:t.defense})}if(e.effectType){const t=getEffectData(e.effectType);l.push({label:"Effect Type",value:t.name}),t.defense&&l.push({label:"Defense",value:t.defense}),t.single&&l.push({label:"Effect",value:`Single Target: ${t.single}, Multi Target: ${t.multi}`})}const a=e.modules.includes("concentration")?"Concentration":"Until end of next turn";return l.push({label:"Duration",value:a}),l.push({label:"Channel Actions",value:state.channelActions}),l}function findDamageType(e){for(const t of Object.values(spellData.damageTypes))if(t[e])return t[e];return null}function getEffectData(e){return"positive"===e.category?spellData.positiveEffects[e.key]:"negative"===e.category?spellData.negativeEffects[e.key]:spellData.conditions[e.key]}function displaySpell(e){DOM.spellName.textContent=sanitizeText(e.name);let t="";e.stats.forEach(e=>{t+=`\n            <div class="detail-row">\n                <span class="detail-label">${sanitizeHTML(String(e.label))}:</span>\n                <span class="detail-value">${sanitizeHTML(String(e.value))}</span>\n            </div>\n        `}),DOM.spellStats.innerHTML=t,DOM.spellDescription.textContent=e.description,DOM.spellOutput.classList.add("visible")}let saveTimeout;function debouncedLocalStorageSave(){clearTimeout(saveTimeout),saveTimeout=setTimeout(()=>{try{localStorage.setItem("savedSpells",JSON.stringify(state.savedSpells))}catch(e){console.error("Failed to save to localStorage:",e),alert("Failed to save spell. Storage may be full.")}},300)}function saveSpell(){state.currentSpell?canSave()?(state.savedSpells.push({...state.currentSpell,id:Date.now()}),debouncedLocalStorageSave(),updateSavedSpellsList(),showNotification(`${sanitizeText(state.currentSpell.name)} has been saved!`,"success")):showNotification("Please wait before saving again","warning",2e3):showNotification("Generate a spell first!","warning")}function exportSpell(){if(!state.currentSpell)return void showNotification("Generate a spell first!","warning");const e=state.currentSpell,t=sanitizeText(e.name);let l=`===== ${t} =====\n\n`;e.classes&&e.classes.length>0&&(l+=`Classes: ${e.classes.map(e=>classData[e]?.name||e).join(", ")}\n`,l+=`Level: ${e.level}\n\n`),l+=`${e.description}\n\n`,l+="--- Stats ---\n",e.stats.forEach(e=>{l+=`${e.label}: ${e.value}\n`});const a=new Blob([l],{type:"text/plain"}),s=URL.createObjectURL(a),n=document.createElement("a");n.href=s;const c=t.replace(/[^a-zA-Z0-9_-]/g,"_").slice(0,50);n.download=`${c||"spell"}.txt`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(s),showNotification("Spell exported successfully!","success")}function updateSavedSpellsList(){if(0===state.savedSpells.length)return void(DOM.savedSpellsList.innerHTML='<p style="text-align: center; color: #999;">No saved spells yet!</p>');const e=document.createDocumentFragment();state.savedSpells.forEach(t=>{const l=t.classes&&t.classes.length>0?` (${t.classes.map(e=>classData[e]?.name||e).join("/")})`:"",a=createElement("div","spell-card");a.dataset.spellId=t.id;const s=sanitizeHTML(String(t.name||"Unnamed Spell")),n=sanitizeHTML(String(t.description||"")),c=parseInt(t.channelActions)||0,i=parseInt(t.level)||1;a.innerHTML=`\n            <button class="delete-btn" data-spell-id="${t.id}">Ã—</button>\n            <div style="font-weight: bold; font-size: 1.2em; color: var(--color-primary); margin-bottom: 8px;">\n                ${s}${sanitizeHTML(l)}\n            </div>\n            <div style="font-size: 0.95em;">${n}</div>\n            <div style="margin-top: 8px; font-size: 0.85em; color: #666;">\n                Channel Actions: ${c} | Level: ${i}\n            </div>\n        `,a.addEventListener("click",e=>{e.target.classList.contains("delete-btn")||loadSpell(t.id)}),a.querySelector(".delete-btn").addEventListener("click",e=>{e.stopPropagation(),deleteSpell(t.id)}),e.appendChild(a)}),DOM.savedSpellsList.innerHTML="",DOM.savedSpellsList.appendChild(e)}function loadSpell(e){const t=state.savedSpells.find(t=>t.id===e);t&&(resetSpell(),state.channelActions=t.channelActions||0,DOM.channelCount.textContent=state.channelActions,t.level&&(state.playerLevel=t.level,DOM.playerLevel.value=t.level),t.classes&&Array.isArray(t.classes)&&(state.selectedClasses=[...t.classes],updateClassUI(),updateClassInfo()),t.base&&t.base.type&&selectSpellType(t.base.type),requestAnimationFrame(()=>{state.selected.base=t.base,t.damageType&&(state.selected.damageType=t.damageType),t.healType&&(state.selected.healType=t.healType),t.effectType&&(state.selected.effectType=t.effectType),t.modules&&Array.isArray(t.modules)&&(state.selected.modules=[...t.modules]),t.extraBuffs&&(state.selected.extraBuffs={...t.extraBuffs}),updateModuleStates(),updateAvailableModules(),updateExtraBuffSection(),displaySpell(t)}))}function deleteSpell(e){confirm("Delete this spell?")&&(state.savedSpells=state.savedSpells.filter(t=>t.id!==e),debouncedLocalStorageSave(),updateSavedSpellsList())}function resetSpell(){state.selected={spellType:null,base:null,damageType:null,healType:null,effectType:null,modules:[],extraBuffs:{}},cachedQueries.spellTypeCards||(cachedQueries.spellTypeCards=document.querySelectorAll(".spell-type-card")),cachedQueries.spellTypeCards.forEach(e=>e.classList.remove("selected")),cachedQueries.allSections||(cachedQueries.allSections=document.querySelectorAll(".section")),cachedQueries.allSections.forEach(e=>e.classList.remove("active")),DOM.sections.spellType.classList.add("active"),DOM.resetBtn.style.display="none",DOM.generateBtn.style.display="none",DOM.spellOutput.classList.remove("visible"),DOM.extraBuffSection.style.display="none",updateAvailableModules()}function isValidSpell(e){return e&&"object"==typeof e&&e.base&&e.base.type&&Array.isArray(e.modules)&&"string"==typeof e.name&&void 0!==e.id}function init(){cacheDOMElements(),setupEventListeners();try{const e=localStorage.getItem("savedSpells");if(e){const t=JSON.parse(e);Array.isArray(t)?(state.savedSpells=t.filter(isValidSpell),state.savedSpells.length!==t.length&&(console.warn("Some saved spells were corrupted and removed"),localStorage.setItem("savedSpells",JSON.stringify(state.savedSpells)))):(console.error("Invalid saved spells format"),state.savedSpells=[])}}catch(e){console.error("Failed to load saved spells:",e),state.savedSpells=[],localStorage.removeItem("savedSpells")}renderClasses(),renderSpellTypes(),updateSavedSpellsList(),updateAvailableModules()}document.addEventListener("DOMContentLoaded",init);
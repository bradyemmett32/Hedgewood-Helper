const CACHE_NAME="hedgewood-helper-v1.0.0",ASSETS_TO_CACHE=["/","/index.html","/foraging.html","/dist/styles.min.css","/dist/foraging.min.css","/dist/script.min.js","/dist/data.min.js","/dist/foraging.min.js","/dist/foraging-data.min.js"];self.addEventListener("install",e=>{console.log("[SW] Installing service worker..."),e.waitUntil(caches.open(CACHE_NAME).then(e=>(console.log("[SW] Caching app assets"),e.addAll(ASSETS_TO_CACHE))).then(()=>(console.log("[SW] All assets cached"),self.skipWaiting())).catch(e=>{console.error("[SW] Cache failed:",e)}))}),self.addEventListener("activate",e=>{console.log("[SW] Activating service worker..."),e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==CACHE_NAME)return console.log("[SW] Deleting old cache:",e),caches.delete(e)}))).then(()=>(console.log("[SW] Service worker activated"),self.clients.claim())))}),self.addEventListener("fetch",e=>{"GET"===e.request.method&&e.respondWith(caches.match(e.request).then(t=>t?(console.log("[SW] Serving from cache:",e.request.url),t):(console.log("[SW] Fetching from network:",e.request.url),fetch(e.request).then(t=>{if(!t||200!==t.status||"basic"!==t.type)return t;const s=t.clone();return caches.open(CACHE_NAME).then(t=>{t.put(e.request,s)}),t}).catch(t=>{if(console.error("[SW] Fetch failed:",t),"navigate"===e.request.mode)return caches.match("/index.html");throw t}))))}),self.addEventListener("message",e=>{e.data&&"SKIP_WAITING"===e.data.type&&self.skipWaiting(),e.data&&"CLEAR_CACHE"===e.data.type&&e.waitUntil(caches.delete(CACHE_NAME).then(()=>(console.log("[SW] Cache cleared"),self.clients.matchAll())).then(e=>{e.forEach(e=>{e.postMessage({type:"CACHE_CLEARED"})})}))});
function sanitizeHTML(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}function sanitizeText(e){return"string"!=typeof e?"":e.replace(/<[^>]*>/g,"").trim().slice(0,200)}function showNotification(e,t="info",n=3e3){const a=document.createElement("div");a.className=`notification notification-${t}`,a.textContent=e;(document.getElementById("notificationContainer")||createNotificationContainer()).appendChild(a),requestAnimationFrame(()=>{a.classList.add("show")}),setTimeout(()=>{a.classList.remove("show"),setTimeout(()=>a.remove(),300)},n)}function createNotificationContainer(){const e=document.createElement("div");return e.className="notification-container",e.id="notificationContainer",document.body.appendChild(e),e}let lastSaveTime=0;const SAVE_COOLDOWN=1e3;function canSave(){const e=Date.now();return!(e-lastSaveTime<1e3)&&(lastSaveTime=e,!0)}function createElement(e,t,n,a=!1){const o=document.createElement(e);return t&&(o.className=t),n&&(a?o.innerHTML=n:o.textContent=n),o}function toggleClass(e,t,n){void 0!==n?e.classList.toggle(t,n):e.classList.toggle(t)}const state={inventory:{},currentFilter:"all"},DOM={plantsGrid:null,mushroomsGrid:null,inventorySummary:null,clearInventoryBtn:null},cachedQueries={filterButtons:null,forageCards:null};function invalidateQueryCache(e=null){e?cachedQueries[e]=null:Object.keys(cachedQueries).forEach(e=>cachedQueries[e]=null)}function cacheDOMElements(){DOM.plantsGrid=document.getElementById("plantsGrid"),DOM.mushroomsGrid=document.getElementById("mushroomsGrid"),DOM.inventorySummary=document.getElementById("inventorySummary"),DOM.clearInventoryBtn=document.getElementById("clearInventory")}function isValidInventory(e){if(!e||"object"!=typeof e||Array.isArray(e))return!1;for(const[t,n]of Object.entries(e)){if("string"!=typeof t||!t.match(/^(plant|mushroom)-\d+$/))return!1;if("number"!=typeof n||n<0||!Number.isInteger(n))return!1}return!0}function loadInventory(){try{const e=localStorage.getItem("foragingInventory");if(e){const t=JSON.parse(e);isValidInventory(t)?state.inventory=t:(console.warn("Invalid inventory data found, resetting inventory"),state.inventory={},localStorage.removeItem("foragingInventory"))}}catch(e){console.error("Failed to load saved inventory:",e),state.inventory={},localStorage.removeItem("foragingInventory")}}let saveTimeout;function debouncedLocalStorageSave(){clearTimeout(saveTimeout),saveTimeout=setTimeout(()=>{try{localStorage.setItem("foragingInventory",JSON.stringify(state.inventory))}catch(e){console.error("Failed to save to localStorage:",e),showNotification("Failed to save inventory. Storage may be full.","error")}},300)}function saveInventory(){canSave()&&debouncedLocalStorageSave()}function init(){cacheDOMElements(),loadInventory(),renderPlants(),renderMushrooms(),updateInventorySummary(),setupEventListeners()}function setupEventListeners(){document.addEventListener("click",handleClick)}function handleClick(e){const t=e.target;if(t.classList.contains("filter-btn"))handleFilterClick(t);else{if(t.classList.contains("qty-btn")){return void adjustQuantity(t.dataset.id,t.classList.contains("plus")?1:-1)}"clearInventory"!==t.id||handleClearInventory()}}function handleFilterClick(e){cachedQueries.filterButtons||(cachedQueries.filterButtons=document.querySelectorAll(".filter-btn")),cachedQueries.filterButtons.forEach(e=>toggleClass(e,"active",!1)),toggleClass(e,"active",!0),state.currentFilter=e.dataset.filter,filterItems()}function handleClearInventory(){showNotification("Click Clear All again within 3 seconds to confirm","warning",3e3),"true"===DOM.clearInventoryBtn.dataset.confirmClear?(state.inventory={},saveInventory(),updateInventorySummary(),renderPlants(),renderMushrooms(),showNotification("Inventory cleared successfully","success"),DOM.clearInventoryBtn.dataset.confirmClear="false"):(DOM.clearInventoryBtn.dataset.confirmClear="true",setTimeout(()=>{DOM.clearInventoryBtn.dataset.confirmClear="false"},3e3))}function filterItems(){cachedQueries.forageCards||(cachedQueries.forageCards=document.querySelectorAll(".forage-card")),cachedQueries.forageCards.forEach(e=>{if("all"===state.currentFilter)e.style.display="block";else{e.dataset.effects.toLowerCase().includes(state.currentFilter.toLowerCase())?e.style.display="block":e.style.display="none"}})}function renderPlants(){DOM.plantsGrid.innerHTML="",invalidateQueryCache("forageCards");const e=document.createDocumentFragment();foragingData.plants.forEach((t,n)=>{const a=createForageCard(t,`plant-${n}`,n+1);e.appendChild(a)}),DOM.plantsGrid.appendChild(e)}function renderMushrooms(){DOM.mushroomsGrid.innerHTML="",invalidateQueryCache("forageCards");const e=document.createDocumentFragment();foragingData.mushrooms.forEach((t,n)=>{const a=createForageCard(t,`mushroom-${n}`,n+1);e.appendChild(a)}),DOM.mushroomsGrid.appendChild(e)}function createForageCard(e,t,n){const a=document.createElement("div");a.className="forage-card",a.dataset.effects=Object.values(e.effects).join(",");const o=state.inventory[t]||0;return a.innerHTML=`\n        <div class="forage-header">\n            <div class="roll-number">${sanitizeHTML(String(n))}</div>\n            <h3 class="forage-name">${sanitizeHTML(e.name)}</h3>\n            <div class="quantity-control">\n                <button class="qty-btn minus" data-id="${sanitizeHTML(t)}">‚àí</button>\n                <span class="quantity-display">${sanitizeHTML(String(o))}</span>\n                <button class="qty-btn plus" data-id="${sanitizeHTML(t)}">+</button>\n            </div>\n        </div>\n        <p class="forage-description">${sanitizeHTML(e.description)}</p>\n        <div class="effects-grid">\n            <div class="effect-item">\n                <strong>üß™ Alchemist:</strong>\n                <span>${sanitizeHTML(e.effects.alchemist)}</span>\n            </div>\n            <div class="effect-item">\n                <strong>üç≥ Cook:</strong>\n                <span>${sanitizeHTML(e.effects.cook)}</span>\n            </div>\n            <div class="effect-item">\n                <strong>üå± Herbalogist:</strong>\n                <span>${sanitizeHTML(e.effects.herbalogist)}</span>\n            </div>\n        </div>\n    `,a}function adjustQuantity(e,t){if(!e||"number"!=typeof t)return void console.warn("Invalid quantity adjustment parameters");const n=state.inventory[e]||0,a=Math.max(0,n+t);0===a?delete state.inventory[e]:state.inventory[e]=a,saveInventory(),updateQuantityDisplay(e,a),updateInventorySummary()}function updateQuantityDisplay(e,t){try{const n=document.querySelector(`[data-id="${e}"]`)?.closest(".forage-card");if(!n)return void console.warn(`Card not found for id: ${e}`);const a=n.querySelector(".quantity-display");if(!a)return void console.warn(`Display element not found for id: ${e}`);a.textContent=t,toggleClass(a,"quantity-updated",!0),requestAnimationFrame(()=>{setTimeout(()=>{requestAnimationFrame(()=>{toggleClass(a,"quantity-updated",!1)})},300)})}catch(e){console.error("Error updating quantity display:",e)}}function updateInventorySummary(){if(0===Object.keys(state.inventory).length)return void(DOM.inventorySummary.innerHTML='<p class="empty-inventory">No items collected yet. Use the + buttons to add items to your inventory.</p>');const e=[];foragingData.plants.forEach((t,n)=>{const a=`plant-${n}`;state.inventory[a]&&e.push({name:t.name,quantity:state.inventory[a],type:"üåø"})}),foragingData.mushrooms.forEach((t,n)=>{const a=`mushroom-${n}`;state.inventory[a]&&e.push({name:t.name,quantity:state.inventory[a],type:"üçÑ"})}),e.sort((e,t)=>t.quantity-e.quantity);const t=document.createDocumentFragment(),n=createElement("div","inventory-list");e.forEach(e=>{const t=createElement("div","inventory-item"),a=createElement("span","item-icon",e.type),o=createElement("span","item-name",e.name),r=createElement("span","item-quantity",`√ó${e.quantity}`);t.appendChild(a),t.appendChild(o),t.appendChild(r),n.appendChild(t)}),t.appendChild(n);const a=createElement("div","inventory-total",`Total Items: ${e.reduce((e,t)=>e+t.quantity,0)}`);t.appendChild(a),DOM.inventorySummary.innerHTML="",DOM.inventorySummary.appendChild(t)}document.addEventListener("DOMContentLoaded",init);